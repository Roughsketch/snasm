use std::str::FromStr;
use crate::ast::*;
use lalrpop_util::ErrorRecovery;

grammar;

pub Program: Vec<Expr> = {
    <Expr+> => <>,
}

pub Expr: Expr = {
    <Label> => Expr::Label(<>),
    Instruction,
}

Instruction: Expr = {
    r"(?i)ADC" <arg:ArgType?> => Expr::Opcode("ADC".to_string(), arg),
    r"(?i)AND" <arg:ArgType> => Expr::Opcode("AND".to_string(), arg),
    r"(?i)ASL" <arg:ArgType> => Expr::Opcode("ASL".to_string(), arg),
}

Label: String = {
    <Identifier> ":" => {
        println!("Label: {}", <>);
        <>.to_string()
    },
}

Identifier: String = {
    r"[a-z][a-zA-Z0-9_]*" => {
        println!("Identifier: {}", <>);
        <>.to_string()
    },
}

ArgType: ArgType = {
    Arg => ArgType::
}

Arg: Arg = {
    <Math> => Arg::Number(<>),
    <Identifier> => {
        println!("Arg ident");
        Arg::Identifier(<>.to_string())
    }
}

Math: i32 = {
    <l:Math> "+" <r:Factor> => l + r,
    <l:Math> "-" <r:Factor> => l - r,
    Factor => <>,
};

Factor: i32 = {
    <l:Factor> "*" <r:Exp> => l * r,
    <l:Factor> "/" <r:Exp> => l / r,
    Exp,
};

Exp: i32 = {
    <l:Exp> "^" <r:Term> => {
        assert!(r <= i32::max_value());
        l.pow(r as u32)
    },
    Term,
}

Term: i32 = {
    Num,
    "(" <Math> ")",
};

Num: i32 = {
    r"(-?)[0-9]+" => i32::from_str(<>).unwrap(),
    r"\$[0-9a-fA-F]+" => i32::from_str_radix(&<>[1..], 16).unwrap(),
    r"%[01]+" => i32::from_str_radix(&<>[1..], 2).unwrap(),
};